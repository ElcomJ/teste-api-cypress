{
  "stats": {
    "suites": 3,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-05-28T22:51:19.352Z",
    "end": "2023-05-28T22:51:25.990Z",
    "duration": 6638
  },
  "results": [
    {
      "uuid": "87e3e1a1-07de-4f53-9034-49a7a632ffc3",
      "title": "",
      "fullFile": "cypress/e2e/exercicio-api.cy.js",
      "file": "cypress/e2e/exercicio-api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3ba1928e-b16b-4cce-aa1f-e359d5d1d36d",
          "title": "Testes da Funcionalidade Usuários",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de usuários",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar contrato de usuários",
              "timedOut": null,
              "duration": 87,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  return _usuarios.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "792404d3-314d-4256-8d34-be13494ea182",
              "parentUUID": "3ba1928e-b16b-4cce-aa1f-e359d5d1d36d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve listar usuários cadastrados",
              "fullTitle": "Testes da Funcionalidade Usuários Deve listar usuários cadastrados",
              "timedOut": null,
              "duration": 36,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('usuarios').then(response => {\n  expect(response.status).to.equal(200);\n});",
              "err": {},
              "uuid": "bee56c36-f2a1-449f-b5fb-9a280600972e",
              "parentUUID": "3ba1928e-b16b-4cce-aa1f-e359d5d1d36d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve cadastrar um usuário com sucesso",
              "fullTitle": "Testes da Funcionalidade Usuários Deve cadastrar um usuário com sucesso",
              "timedOut": null,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `Usuario Teste ${Math.floor(Math.random() * 1000)}`;\nlet email = `email_teste${Math.floor(Math.random() * 1000)}@ebac.com`;\ncy.cadastrarUsuario(usuario, email, \"teste1\", \"false\").then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "d7b4580b-616c-4621-b04a-bf77a79d6bee",
              "parentUUID": "3ba1928e-b16b-4cce-aa1f-e359d5d1d36d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar um usuário com email inválido",
              "fullTitle": "Testes da Funcionalidade Usuários Deve validar um usuário com email inválido",
              "timedOut": null,
              "duration": 34,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let usuario = `Usuario Teste ${Math.floor(Math.random() * 50)}`;\ncy.cadastrarUsuario(usuario, \"marcelo_teste@ebac.com\", \"teste1\", \"false\").then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Este email já está sendo usado');\n});",
              "err": {},
              "uuid": "8bdc8d1a-c4e2-42c7-84e9-68cc55e50adc",
              "parentUUID": "3ba1928e-b16b-4cce-aa1f-e359d5d1d36d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve editar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 46,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Usuario Teste ${Math.floor(Math.random() * 50)}`;\nlet email = `email_teste${Math.floor(Math.random() * 1000)}@ebac.com`;\nlet senha = `teste${Math.floor(Math.random() * 50)}`;\ncy.cadastrarUsuario(produto, email, senha, \"false\").then(response => {\n  let id = response.body._id;\n  let email = `email_teste${Math.floor(Math.random() * 1000)}@ebac.com`;\n  cy.request({\n    method: 'PUT',\n    url: `usuarios/${id}`,\n    body: {\n      \"nome\": produto,\n      \"email\": email,\n      \"password\": senha,\n      \"administrador\": \"false\"\n    }\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "769777e9-5580-43a0-a60d-21ead663a3c3",
              "parentUUID": "3ba1928e-b16b-4cce-aa1f-e359d5d1d36d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um usuário previamente cadastrado",
              "fullTitle": "Testes da Funcionalidade Usuários Deve deletar um usuário previamente cadastrado",
              "timedOut": null,
              "duration": 46,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Usuario Teste ${Math.floor(Math.random() * 50)}`;\nlet email = `email_teste${Math.floor(Math.random() * 1000)}@ebac.com`;\nlet senha = `teste${Math.floor(Math.random() * 50)}`;\ncy.cadastrarUsuario(produto, email, senha, \"false\").then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `usuarios/${id}`\n  }).then(response => {\n    expect(response.status).to.equal(200);\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n  });\n});",
              "err": {},
              "uuid": "01cf9c9e-0798-47fb-aeca-f1cf19733457",
              "parentUUID": "3ba1928e-b16b-4cce-aa1f-e359d5d1d36d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "792404d3-314d-4256-8d34-be13494ea182",
            "bee56c36-f2a1-449f-b5fb-9a280600972e",
            "d7b4580b-616c-4621-b04a-bf77a79d6bee",
            "8bdc8d1a-c4e2-42c7-84e9-68cc55e50adc",
            "769777e9-5580-43a0-a60d-21ead663a3c3",
            "01cf9c9e-0798-47fb-aeca-f1cf19733457"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 283,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8622af2e-5d0f-440a-b521-edd3342b2cdc",
      "title": "",
      "fullFile": "cypress/e2e/login.cy.js",
      "file": "cypress/e2e/login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "26ca5b8d-fea0-4f21-b4a7-5d6f79c2b083",
          "title": "Login - Testes da API ServeRest",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve fazer login com sucesso",
              "fullTitle": "Login - Testes da API ServeRest Deve fazer login com sucesso",
              "timedOut": null,
              "duration": 163,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: 'http://localhost:3000/login',\n  body: {\n    \"email\": \"fulano@qa.com\",\n    \"password\": \"teste\"\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.message).to.equal('Login realizado com sucesso');\n  cy.log(response.body.authorization);\n});",
              "err": {},
              "uuid": "070a63c1-29bf-4679-86b2-bb98c8287437",
              "parentUUID": "26ca5b8d-fea0-4f21-b4a7-5d6f79c2b083",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "070a63c1-29bf-4679-86b2-bb98c8287437"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 163,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "c14ea150-7a2e-4b00-8a5d-4454c023e63c",
      "title": "",
      "fullFile": "cypress/e2e/produtos.cy.js",
      "file": "cypress/e2e/produtos.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a3b8cc05-73fd-4b46-9b47-a227e5d94c42",
          "title": "Teste da Funcionalidade Produtos",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Deve validar contrato de produtos",
              "fullTitle": "Teste da Funcionalidade Produtos Deve validar contrato de produtos",
              "timedOut": null,
              "duration": 89,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('produtos').then(response => {\n  return _produtos.default.validateAsync(response.body);\n});",
              "err": {},
              "uuid": "e3c6132a-eabe-45a8-95f1-3dec52591997",
              "parentUUID": "a3b8cc05-73fd-4b46-9b47-a227e5d94c42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Listar produtos",
              "fullTitle": "Teste da Funcionalidade Produtos Listar produtos",
              "timedOut": null,
              "duration": 46,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'GET',\n  url: 'produtos'\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body).to.have.property('produtos');\n  expect(response.duration).to.be.lessThan(15);\n});",
              "err": {},
              "uuid": "188e0107-272d-4a2c-a319-dfd3cda3eace",
              "parentUUID": "a3b8cc05-73fd-4b46-9b47-a227e5d94c42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cadastrar produto",
              "fullTitle": "Teste da Funcionalidade Produtos Cadastrar produto",
              "timedOut": null,
              "duration": 38,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000)}`;\ncy.request({\n  method: 'POST',\n  url: 'produtos',\n  headers: {\n    authorization: token\n  },\n  body: {\n    \"nome\": produto,\n    \"preco\": 200,\n    \"descricao\": \"Produto novo\",\n    \"quantidade\": 100\n  }\n}).then(response => {\n  expect(response.status).to.equal(201);\n  expect(response.body.message).to.equal('Cadastro realizado com sucesso');\n});",
              "err": {},
              "uuid": "b5250e15-3978-4491-9a05-b7cf800661bf",
              "parentUUID": "a3b8cc05-73fd-4b46-9b47-a227e5d94c42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve validar mensagem de erro ao cadastrar produto repetido",
              "fullTitle": "Teste da Funcionalidade Produtos Deve validar mensagem de erro ao cadastrar produto repetido",
              "timedOut": null,
              "duration": 37,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.cadastrarProduto(token, \"Produto EBAC Novo 1\", 250, \"Descrição do produto novo\", 180).then(response => {\n  expect(response.status).to.equal(400);\n  expect(response.body.message).to.equal('Já existe produto com esse nome');\n});",
              "err": {},
              "uuid": "e4d7dc12-3199-4774-a24d-3ced855b2f64",
              "parentUUID": "a3b8cc05-73fd-4b46-9b47-a227e5d94c42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto já cadastrado",
              "fullTitle": "Teste da Funcionalidade Produtos Deve editar um produto já cadastrado",
              "timedOut": null,
              "duration": 50,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000)}`;\ncy.request('produtos').then(response => {\n  let id = response.body.produtos[0]._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": \"200\",\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": \"200\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n  });\n});",
              "err": {},
              "uuid": "9d973973-0b9e-42b6-a452-14c8edc9727f",
              "parentUUID": "a3b8cc05-73fd-4b46-9b47-a227e5d94c42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve editar um produto cadastrado previamente",
              "fullTitle": "Teste da Funcionalidade Produtos Deve editar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 44,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'PUT',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    },\n    body: {\n      \"nome\": produto,\n      \"preco\": \"200\",\n      \"descricao\": \"Produto editado\",\n      \"quantidade\": \"300\"\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro alterado com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "6c87f07f-d1a8-41a4-875a-024561643bbf",
              "parentUUID": "a3b8cc05-73fd-4b46-9b47-a227e5d94c42",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deve deletar um produto cadastrado previamente",
              "fullTitle": "Teste da Funcionalidade Produtos Deve deletar um produto cadastrado previamente",
              "timedOut": null,
              "duration": 48,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let produto = `Produto EBAC ${Math.floor(Math.random() * 10000)}`;\ncy.cadastrarProduto(token, produto, 250, \"Descrição do produto novo\", 180).then(response => {\n  let id = response.body._id;\n  cy.request({\n    method: 'DELETE',\n    url: `produtos/${id}`,\n    headers: {\n      authorization: token\n    }\n  }).then(response => {\n    expect(response.body.message).to.equal('Registro excluído com sucesso');\n    expect(response.status).to.equal(200);\n  });\n});",
              "err": {},
              "uuid": "3b57d308-263b-4790-a18d-36f22665fe40",
              "parentUUID": "a3b8cc05-73fd-4b46-9b47-a227e5d94c42",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3c6132a-eabe-45a8-95f1-3dec52591997",
            "188e0107-272d-4a2c-a319-dfd3cda3eace",
            "b5250e15-3978-4491-9a05-b7cf800661bf",
            "e4d7dc12-3199-4774-a24d-3ced855b2f64",
            "9d973973-0b9e-42b6-a452-14c8edc9727f",
            "6c87f07f-d1a8-41a4-875a-024561643bbf",
            "3b57d308-263b-4790-a18d-36f22665fe40"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 352,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "mochawesome-report",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}